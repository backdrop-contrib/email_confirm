<?php

/**
 * @file
 * The Email Change Confirmation module.
 */

/**
 * Implements hook_menu().
 */
function email_confirm_menu() {
  $items = array();

  $items['user/change-mail'] = array(
    'title' => 'Change e-mail',
    'page callback' => 'email_confirm_user_change_mail',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/people/email_confirm'] = array(
    'title' => 'Email change confirmation settings',
    'description' => 'Configuration of confirmation email sent to users who attempt to change their email address.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('email_confirm_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function email_confirm_permission() {
  $permissions = array(
    'bypass email confirmation' => array(
      'title' => t('Bypass Email Change Confirmation'),
      'description' => t('Allow user to change user emails without requiring a confirmation email.'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_config_info().
 */
function email_confirm_config_info() {
  $prefixes['email_confirm.settings'] = array(
    'label' => t('Email Confirm settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements hook_settings().
 */
function email_confirm_admin_settings() {
  $form = array();
  $config = config('email_confirm.settings');

  $form['#config'] = 'email_confirm.settings';

  $form['confirmation_email_subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address change request email subject'),
    '#description' => t('The above text will be the subject for the email sent to a user that is attempting to update their email address. The placeholders [user:name] and [site:name] will be replaced by the username and the site name.'),
    '#default_value' => email_confirm_mail_text('confirmation_email_subject', NULL, array(), FALSE),
    '#size' => 60,
    '#maxlength' => 256,
    '#required' => TRUE,
  );

  $email_author = $config->get('confirmation_email_author');
  $email_author = !empty($email_author) ? $email_author : email_confirm_default_confirmation_email_author();
  $form['confirmation_email_author'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address change request email author'),
    '#description' => t('The above address will be the \'From\' email address for the confirmation email for an email address change request. The default value is the site email address set on the <a href="@site-info">Site information</a> admin page. If using the SMTP Authentication Support module, check that module\'s configuration page for setting the default site email address.', array('@site-info' => url('admin/config/system/site-information'))),
    '#default_value' => $email_author,
    '#size' => 60,
  );

  $form['confirmation_email_bcc'] = array(
    '#type' => 'textfield',
    '#title' => t('Email address change request email BCC email address'),
    '#description' => t('The above address will receive a BCC email copy of the confirmation email for an email address change request.'),
    '#default_value' => $config->get('confirmation_email_bcc'),
    '#size' => 60,
  );

  $form['confirmation_email_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email address change request email body'),
    '#description' => t("The above text will be the body for the email sent to a user that is attempting to update their email address. The text here will be sent to the user's new email address. The placeholders [user:name] and [site:name] will be replaced by the username and the site name."),
    '#default_value' => email_confirm_mail_text('confirmation_email_body', NULL, array(), FALSE),
    '#cols' => 80,
    '#rows' => 10,
    '#required' => TRUE,
  );

  $form['confirmation_original_email_body'] = array(
    '#type' => 'textarea',
    '#title' => t('Email address change request email body (Original)'),
    '#description' => t("The above text will be the body for the email sent to a user that is attempting to update their email address. The text here will be sent to the user's original email address. The placeholders [user:name] and [site:name] will be replaced by the username and the site name."),
    '#default_value' => email_confirm_mail_text('confirmation_original_email_body', NULL, array(), FALSE),
    '#cols' => 80,
    '#rows' => 10,
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_confirm_form_email_confirm_admin_settings_alter(&$form, &$form_state) {
  foreach (element_children($form) as $key) {
    $element = &$form[$key];

    switch ($key) {
      case 'confirmation_email_body':
      case 'confirmation_original_email_body':
        $element['#description'] = trim(str_replace('The placeholders [user:name] and [site:name] will be replaced by the username and the site name.', t('The list of available tokens that can be used in e-mails is provided below.'), $element['#description']));
        $element += array('#token_types' => array('user'));
        break;
    }
  }

  // Add the token tree UI.
  $form['token_tree'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('user'),
    '#show_restricted' => TRUE,
    '#weight' => 90,
  );
}

/**
 * Validate the admin settings.
 */
function email_confirm_admin_settings_validate($form, $form_state) {
  if (!empty($form_state['values']['confirmation_email_author']) && !valid_email_address($form_state['values']['confirmation_email_author'])) {
    form_set_error('confirmation_email_author', t('You must enter a valid email address for the "Email address change request email author" setting.'));
  }
  if (!empty($form_state['values']['confirmation_email_bcc']) && !valid_email_address($form_state['values']['confirmation_email_bcc'])) {
    form_set_error('confirmation_email_bcc', t('You must enter a valid email address for the "Email address change request email BCC email address" setting.'));
  }
}

/**
 * Implements hook_user_presave().
 */
function email_confirm_user_presave($account) {
  if (!empty($account->mail) && (!empty($account->original->mail) && backdrop_strtolower($account->original->mail) != backdrop_strtolower($account->mail)) && !user_access('bypass email confirmation') && !backdrop_installation_attempted() && (!isset($account->data['email_confirmed']) || $account->data['email_confirmed'] === FALSE)) {
    // Set a temporary session variable to indicate that the email was
    // changed. Is used in hook_exit to clear out a Backdrop message set
    // by the user module after user_save() is called.
    $_SESSION['email_changed'] = TRUE;
    email_confirm_build_mail($account);
    // Save the new email address as pending and keep the original until
    // confirmed.
    $account->data['email_confirm']['pending_email'] = $account->mail;
    $account->mail = $account->original->mail;
    $account->data['email_confirm']['expiration_time'] = (REQUEST_TIME + 86400);
    module_invoke_all('email_confirm', 'email change', $account->uid, $account->original->mail, $account->mail);
    if (module_exists('rules')) {
      rules_invoke_event('email_confirm_email_change_request', $account, $account->original->mail, $account->mail);
    }
  }

  if ((isset($account->data['email_confirmed']) && $account->data['email_confirmed'] === TRUE) || (!empty($account->data) && isset($account->data['email_confirm']) && $account->data['email_confirm']['expiration_time'] < REQUEST_TIME)) {
    unset($account->data['email_confirm']);
    unset($account->data['email_confirmed']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function email_confirm_form_user_profile_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($user->uid && isset($user->data['email_confirm']) && isset($form['account'])) {
    if (isset($user->data['email_confirm']['pending_email']) && $user->data['email_confirm']['expiration_time'] > REQUEST_TIME) {
      $pending_email_notice = '<div class="messages warning">' . t('You currently have a pending change of your e-mail address to <strong>%email</strong>', array('%email' => $user->data['email_confirm']['pending_email'])) . '</div>';
      $form['account']['mail']['#description'] = $form['account']['mail']['#description'] . $pending_email_notice;
    }
  }

}

/**
 * Menu callback; process one time email change confirm.
 *
 * @param int $uid
 *   Their uid.
 * @param int $timestamp
 *   Timestamp the hash was generated.
 * @param string $hash
 *   A hash, to validate the change being taken.
 *
 * @return int
 *   Returns MENU_ACCESS_DENIED if there is a problem or redirects on success.
 */
function email_confirm_user_change_mail($uid = NULL, $timestamp = NULL, $hash = NULL) {
  global $user;

  // Check if all required parameters are present.
  if (!isset($uid) || !is_numeric($uid) || !isset($timestamp) || !is_numeric($timestamp) || !isset($hash)) {
    return MENU_ACCESS_DENIED;
  }

  // Time out, in seconds, until login URL expires. 24 hours = 86400 seconds.
  $timeout = config_get('email_confirm.settings', 'timeout');
  $current = REQUEST_TIME;

  // Timestamps in the future are invalid.
  if ($timestamp > $current) {
    backdrop_set_message(t('There was a problem with your one-time e-mail change link. Please attempt the change again.'), 'error');
    backdrop_goto('user/' . $uid . '/edit');
  }

  // Ensure URL is for current user.
  if (!$user->uid || $user->uid != $uid) {
    backdrop_set_message(t('You must be logged in to the same account that requested this e-mail change to proceed.'), 'error');
    if (!$user->uid) {
      backdrop_goto('user/login');
    }
    else {
      return MENU_ACCESS_DENIED;
    }
  }

  // Load pending email change address.
  if (isset($user->data['email_confirm']['pending_email']) && $user->data['email_confirm']['expiration_time'] > $current) {
    $new_mail = $user->data['email_confirm']['pending_email'];
  }
  else {
    backdrop_set_message(t('There was a problem with your one-time e-mail change link. Please attempt the change again.'), 'error');
    backdrop_goto('user/' . $uid . '/edit');
  }

  // Check if timestamp provided is too old.
  if (($current - $timestamp) > $timeout) {
    backdrop_set_message(t('You have tried to use a one-time e-mail change link that has expired. Please attempt the change again.'), 'error');
    backdrop_goto('user/' . $uid . '/edit');
  }

  // Ensure no new logins have occurred since the change was made.
  $account = user_load($uid);
  if ($timestamp < $account->login) {
    backdrop_set_message(t('There was a problem with your one-time e-mail change link. Please attempt the change again.'), 'error');
    backdrop_goto('user/' . $uid . '/edit');
  }

  // Continue with email change if URL hash validates.
  if ($hash === email_confirm_user_email_rehash($new_mail, $timestamp, $uid)) {
    watchdog('user', 'User %name used one-time e-mail change link at time %timestamp.', array('%name' => $user->name, '%timestamp' => $timestamp));
    $old_mail = $user->mail;
    $account->mail = $new_mail;
    $account->login = REQUEST_TIME;
    $account->data['email_confirmed'] = TRUE;
    user_save($account);
    module_invoke_all('email_confirm', 'email confirmation', $uid, $old_mail, $new_mail);
    if (module_exists('rules')) {
      rules_invoke_event('email_confirm_email_change_confirmation', $account, $old_mail, $new_mail);
    }
    backdrop_set_message(t('Your e-mail address is now %mail.', array('%mail' => $new_mail)));
    // We already validated this uid, so just redirect.
    backdrop_goto('user/' . $uid);
  }
  // If hash didn't validate, error out.
  else {
    backdrop_set_message(t('There was a problem with your one-time e-mail change link. Please attempt the change again.'), 'error');
    backdrop_goto('user/' . $uid . '/edit');
  }
}

/**
 * Implements hook_mail().
 */
function email_confirm_mail($key, &$message, $params) {
  $language = $message['language'];
  $account = $params['account'];
  $context = $params['context'];

  $email_confirm = new stdClass();
  $email_confirm->url = $context['url'];

  $variables = array(
    'email_confirm' => $email_confirm,
    'user' => $account,
  );

  $message['subject'] = email_confirm_mail_text('confirmation_email_subject', $language, $variables);
  $message['body'][] = email_confirm_mail_text($key . '_body', $language, $variables);

  if (isset($params['headers']['Bcc'])) {
    $message['headers']['Bcc'] = $params['headers']['Bcc'];
  }
}

/**
 * Build and send out the confirmation emails.
 */
function email_confirm_build_mail($account) {
  $params = array();
  $params['account'] = $account;
  $params['new_mail'] = $account->mail;
  $params['old_mail'] = $account->original->mail;

  $params['context']['url'] = url(email_confirm_confirmation_email_url_path($account->mail, $account->uid), array(
    'absolute' => TRUE,
  ));

  $config = config('email_confirm.settings');

  $default_from = email_confirm_default_confirmation_email_author();
  $from = $config->get('confirmation_email_author');

  // To account for case where the variable was stored with an empty string.
  // Make sure a from email was set. Otherwise, use the default.
  if (empty($from)) {
    $from = $default_from;
  }

  $bcc = $config->get('confirmation_email_bcc');

  $params['headers'] = array();
  if ($bcc) {
    $params['headers']['Bcc'] = $bcc;
  }

  if ($message['result'] = backdrop_mail('email_confirm', 'confirmation_email', $account->mail, user_preferred_language($account), $params, $from)) {
    backdrop_mail('email_confirm', 'confirmation_original_email', $account->original->mail, user_preferred_language($account), $params, $from);
    backdrop_set_message(t('A confirmation email has been sent to your new email address. You must follow the link provided in that email within 24 hours in order to confirm the change to your account email address.'));
  }
}

/**
 * Determines the default from email address.
 *
 * @return string
 *   Default from email address.
 */
function email_confirm_default_confirmation_email_author() {
  $default_from = &backdrop_static(__FUNCTION__);

  if (empty($default_from)) {
    if (module_exists('smtp') && config_get('smtp.settings', 'smtp_from') != '') {
      $default_from = config_get('smtp.settings', 'smtp_from');
    }
    else {
      $default_from = config_get('system.core', 'site_mail');
    }
  }

  return $default_from;
}

/**
 * Returns a mail string for a variable name.
 */
function email_confirm_mail_text($key, $language = NULL, $variables = array(), $replace = TRUE) {
  $langcode = isset($language) ? $language->langcode : NULL;

  $text = config('email_confirm.settings')->getTranslated($key, array(), array('langcode' => $langcode));

  if ($replace) {
    // We do not sanitize the token replacement, since the output of this
    // replacement is intended for an e-mail message, not a web browser.
    return token_replace($text, $variables, array(
      'language' => $language,
      'callback' => 'email_confirm_mail_tokens',
      'sanitize' => FALSE,
      'clear' => TRUE,
    ));
  }

  return $text;
}

/**
 * Generate the tokens for the confirmation emails.
 */
function email_confirm_mail_tokens(&$replacements, $data, $options) {
  // Add any core mail tokens.
  user_mail_tokens($replacements, $data, $options);

  if (isset($data['email_confirm'])) {
    $replacements['[email_confirm:email_url]'] = $data['email_confirm']->url;
  }
}

/**
 * Generate the path part of a URL to confirm an email address change request.
 *
 * @param string $mail
 *   The new email address.
 * @param int $uid
 *   The uid of the account changing their email.
 * @param int $timestamp
 *   Unix timestamp (e.g. from time()).
 * @return string
 *   Path to wrap in `url($return, ['absolute' => TRUE])` to get a full url.
 */
function email_confirm_confirmation_email_url_path($mail, $uid, $timestamp = NULL) {
  // Use time() here instead of REQUEST_TIME as it allows tests to work, the
  // performance impact is minimal, there's no benefit to avoiding time drift
  // during a page request in this code.
  $timestamp = !empty($timestamp) ? $timestamp : time();
  $hash = email_confirm_user_email_rehash($mail, $timestamp, $uid);

  return 'user/change-mail/' . $uid . '/' . $timestamp . '/' . $hash;
}

/**
 * Generate a hash of URL paramaters and pending changed email address.
 */
function email_confirm_user_email_rehash($mail, $timestamp, $uid) {
  // @see user_pass_rehash().
  // The hash_salt supports automated testing.
  // Not a one-time login link, so use 0 instead of last login.
  $hash_salt = config_get('email_confirm.settings', 'hash_salt');
  $hash_salt = !empty($hash_salt) ? $hash_salt : backdrop_get_hash_salt();
  return backdrop_hmac_base64($timestamp . 0 . $uid, $hash_salt . $mail);
}

/**
 * Implements hook_exit().
 */
function email_confirm_exit() {
  if (isset($_SESSION['email_changed'])) {
    $pruned_messages = array();
    $status_messages = backdrop_get_messages('status', TRUE);
    if (count($status_messages)) {
      foreach ($status_messages['status'] as $message) {
        if (strcmp($message, t('The changes have been saved.')) != 0) {
          $pruned_messages[] = $message;
        }
      }
      if (count($pruned_messages)) {
        foreach ($pruned_messages as $message) {
          backdrop_set_message(filter_xss($message), 'status');
        }
      }
    }
    unset($_SESSION['email_changed']);
  }
}
